기본 설정
git config --global user.name "이름" : git에서 커밋 시 기록할 이름
git config --global user.email "이메일" : git에서 커밋 시 기록할 이메일 설정

저장소 생성
github에서 repository 생성 후 clone 하는 경우 아래 대로
git init 저장소 이름 : 명령 실행한 위치에 <저장소 이름>으로 저장소 생성
git clone 저장소 주소 : <저장소 주소>의 저장소를 내 PC에 복사

변경내역 다루기
git add 파일명 : unstaged 파일을 staged 상태로 변경
git commit -m "커밋 설명 메세지" : git add 이후 staged 파일을 remote 저장소로 <commit 설명메세지>와 함께 커밋
git diff : 마지막 커밋과 변경된 내용 비교
git reset 파일명 : git add 명령을 실행해 커밋할 준비가 된 파일을 staging 영역에서 제거
git status : 저장소 상태 확인 (staged, unstaged)

내역 살펴보기
git log : 현재 브랜치 버전 내역
git log --follow 파일명 : 파일의 변경 내역들 출력
git diff 브랜치 타브랜치 : 두 브랜치의 파일들을 비교해 출력

브랜치
협업 프로젝트 시 많이 사용. branch 만들어서 개인적으로 수정 후 merge 하면 편리.

git branch : 저장소에 있는 브랜치 목록 보기
git branch 이름 : <이름>으로 브랜치 만들기
git checkout 브랜치명 : <브랜치명>으로 작업 중인 브랜치를 변경
git branch -d 브랜치 명 : <브랜치 명> 브랜치를 삭제

커밋
git reset 커밋 : 대상 커밋 이후에 생긴 모든 커밋을 취소. 변경된 내용은 로컬 저장소에 남음.

원격 저장소 동기화
git fetch 원격저장소명 : 원격 저장소의 모든 변경 내역을 로컬 저장소에 다운로드
git merge 원격저장소 / 브랜치 명 : 원격저장소의 대상 브랜치를 현재 작업 중은 브랜치에 병합.
git push 원격저장소명 브랜치명 : 로컬 브랜치의 모든 커밋을 원격저장소의 대상 브랜치에 업로드
git pull 원격저장소명 : fetch+merge. 협업할 때 코드 충돌 안정성 확인 후 실행할 것.